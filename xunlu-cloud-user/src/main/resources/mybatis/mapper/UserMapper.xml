<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xunlu.api.user.repository.mapper.UserMapper">
    <resultMap id="userResultMap" type="User">
        <id column="id" property="id"/>
        <association property="prefer" resultMap="preferResultMap"/>
        <discriminator javaType="int" column="third_user_type">
            <case value="1" resultType="ThirdUser"/>
        </discriminator>
    </resultMap>

    <resultMap id="thirdUserResultMap" type="ThirdUser">
        <id column="id" property="id"/>
        <association property="prefer" resultMap="preferResultMap"/>
    </resultMap>

    <resultMap id="preferResultMap" type="com.xunlu.api.user.domain.User$Prefer">
        <id column="id" property="userId"/>
    </resultMap>

    <insert id="addUser" useGeneratedKeys="true" keyProperty="id" >
        insert into tb_user
        (
        user_name,
        nick_name,
        photo,
        email,
        phone,
        password,
        create_time,
        area_code
        )
        values
        (
        #{userName, jdbcType=VARCHAR},
        #{nickName, jdbcType=VARCHAR},
        #{photo, jdbcType=VARCHAR},
        #{email, jdbcType=VARCHAR},
        #{phone, jdbcType=VARCHAR},
        #{password, jdbcType=VARCHAR},
        now(),
        #{areaCode, jdbcType=VARCHAR}
        )
    </insert>

    <insert id="addThirdUser">
        insert into
            tb_third_user (
                user_id,
                type,
                nick_name,
                img,
                openid,
                create_time
            )
        values
            (
                #{id, jdbcType=INTEGER},
                #{type, jdbcType=TINYINT},
                #{nickName, jdbcType=VARCHAR},
                #{imgUrl, jdbcType=VARCHAR},
                #{openid, jdbcType=VARCHAR},
                #{createTime, jdbcType=TIMESTAMP}
            )
    </insert>

    <sql id="selectUserSql" >
        select
        u.id as id,
        u.user_name as user_name,
        ifnull(u.nick_name, tu.nick_name) as nick_name,
        u.person_sign as person_sign,
        ifnull(u.photo, tu.img) as photo,
        u.email as email,
        u.phone as phone,
        u.password as password,
        u.prefer_natural as prefer_natural,
        u.prefer_human as prefer_human,
        u.prefer_running as prefer_running,
        u.prefer_play_time as prefer_play_time,
        u.prefer_night_play as prefer_night_play,
        u.prefer_pub_trans_first as prefer_pub_trans_first,
        u.prefer_hotel_level as prefer_hotel_level,
        u.create_time as create_time,
        u.prefer_trip_number as prefer_trip_number,
        u.prefer_flight as prefer_flight,
        u.area_code as area_code,
        u.tim_sync as tim_sync,
        u.tim_identifier as tim_identifier,
        u.is_spider as is_spider,

        tu.user_id is not null as third_user_type,
        tu.type as type,
        tu.openid as openid
        from
        tb_user as u
        ${join_type} join tb_third_user as tu on  tu.user_id = u.id
    </sql>

    <sql id="leftJoinSelectUserSql">
        <include refid="selectUserSql">
            <property name="join_type" value="left"/>
        </include>
    </sql>

    <sql id="innerJoinSelectUserSql">
        <include refid="selectUserSql">
            <property name="join_type" value="inner"/>
        </include>
    </sql>

    <select id="getById" resultMap="userResultMap">
        <include refid="leftJoinSelectUserSql"/>
        WHERE u.id = #{id} limit 1
    </select>

    <select id="findByPhone" resultMap="userResultMap">
        <include refid="leftJoinSelectUserSql"/>
        WHERE u.phone = #{phone} limit 1
    </select>

    <select id="findThirdUser" resultMap="thirdUserResultMap">
        <include refid="innerJoinSelectUserSql"/>
        WHERE type = #{type} AND openid = #{openid} limit 1
    </select>

    <select id="findPassword" resultType="string">
        select
        password
        from tb_user
        where
        id=#{id}
    </select>

    <select id="getUserPrefer" resultMap="preferResultMap">
        select
        id,
        prefer_natural,
        prefer_human,
        prefer_running,
        prefer_play_time,
        prefer_night_play,
        prefer_pub_trans_first,
        prefer_hotel_level,
        prefer_trip_number,
        prefer_flight
        from tb_user
        where
        id=#{id}

    </select>
    <update id="updatePrefer">
        update tb_user
        <set>
            <if test="prefer != null">
                <if test="prefer.preferNatural != null">
                    prefer_natural = #{prefer.preferNatural},
                </if>
                <if test="prefer.preferHuman != null">
                    prefer_human = #{prefer.preferHuman},
                </if>
                <if test="prefer.preferRunning !=null">
                    prefer_running = #{prefer.preferRunning},
                </if>
                <if test="prefer.preferPlayTime != null">
                    prefer_play_time = #{prefer.preferPlayTime},
                </if>
                <if test="prefer.preferNightPlay != null">
                    prefer_night_play = #{prefer.preferNightPlay},
                </if>
                <if test="prefer.preferPubTransFirst != null">
                    prefer_pub_trans_first = #{prefer.preferPubTransFirst},
                </if>
                <if test="prefer.preferHotelLevel != null">
                    prefer_hotel_level = #{prefer.preferHotelLevel},
                </if>
                <if test="prefer.preferTripNumber != null">
                    prefer_trip_number = #{prefer.preferTripNumber},
                </if>
                <if test="prefer.preferFlight != null">
                    prefer_flight = #{prefer.preferFlight}
                </if>
            </if>
        </set>
        <where>
          id=#{id}
        </where>
    </update>

    <update id="updateTIMIdentifier">
        update tb_user
        <set>
            <choose>
                <when test="identifier != null">
                    tim_identifier = #{identifier}, tim_sync = 1
                </when>
                <otherwise>
                    tim_identifier = null, tim_sync = 0
                </otherwise>
            </choose>
        </set>
        where id = #{id}
    </update>

    <update id="updatePassword">
        update tb_user
        set password = #{password}
        where id = #{id}
    </update>

    <update id="updateNickName">
        update tb_user
        set nick_name = #{nickName}
        where id = #{id}
    </update>

    <update id="updatePersonSign">
        update tb_user
        set person_sign = #{personSign}
        where id = #{id}
    </update>
    <update id="updatePhoto">
        update tb_user
        set photo = #{photo}
        where id = #{id}
    </update>

</mapper>
